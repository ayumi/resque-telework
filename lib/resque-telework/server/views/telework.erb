<%
@subtabs= my_substabs
@tags_to_queues= Resque::Plugins::Telework::QUEUE_TAGS.inject({}) { |hash, tag| hash[tag] = redis.queues_with_tag(tag); hash }
@snapshot= redis.get_snapshot
%>
<% if @refresh %>
<META HTTP-EQUIV="refresh" CONTENT="<%= @refresh%>">
<% end %>

<style>
  .clear:before,
  .clear:after {
    content: " ";
    display: table;
  }
  .clear:after {
    clear: both;
  }
  #main form {
    float: left;
    margin: 5px 0;
  }
  .pull-right {
    float: right !important;
  }
  .label-default {
    color: #999;
    font-size: 11px;
    margin: 0 3px;
  }
  .notice {
    margin: 30px 0;
    padding: 10px;
    color: #8a6d3b;
    background-color: #fcf8e3;
    border: 1px solid #faebcc;
  }
</style>

<script language="javascript" type="text/javascript">
function hostlist(index) {
  if (document.startform && document.startform.rev_filter) {
    document.startform.rev_filter.options.length = 0;
    switch(index) {
  	<% for host in redis.hosts %>
  	  <%= "case'#{host}':" %>
  	  <% i= 0 %>
  	  <% for rev in redis.revisions(host) %>
  	    <%= "document.startform.rev_filter.options[#{i}]= new Option('#{rev['revision_small']} from #{redis.fmt_date(rev['revision_date'])}', '#{rev['revision']} #{rev['revision_small']}' );" %>
  	  <% i+= 1 %>
  	  <% end %> break;
  	<% end %>
    };
  }
  return true;
};
function queuelist(index) {
	if(index != "(other)") {
    if (document.startform) {
  		document.startform.queue_text.value= "";
    }
	}
	return true;
};
function queuetext(val) {
  if(val!="") {
    if (document.startform) {
      document.startform.queue_filter.selectedIndex= 0;
    }
  }
};
function action(val) {
	var params = val.split(",");
    var url = "";
    switch(params[0]) {
	  case "start":
	    url = "/start?task="+params[1]+"&host="+params[2]+"&rev="+document.getElementById("rev_filter_"+params[1]).value+
	                                                      "&count="+document.getElementById("count_filter_"+params[1]).value;
	    break;
	  case "pause":
	    url = "/pause?task="+params[1]+"&host="+params[2];
	    break;
	  case "cont":
	    url = "/pause?cont=true&task="+params[1]+"&host="+params[2];
	    break;
	  case "stop":
	    url = "/stop?kill=false&task="+params[1]+"&host="+params[2];
	    break;
	  case "kill":
	    url = "/stop?kill=true&task="+params[1]+"&host="+params[2];
	    break;
	  case "delete":
	    url = "/delete?task="+params[1]+"&host="+params[2];
	    break;
	  case "auto":
	    url = "/start_auto?task="+params[1]+"&host="+params[2]+"&rev="+document.getElementById("rev_filter_"+params[1]).value+
	                                                      "&count="+document.getElementById("count_filter_"+params[1]).value;
	    break;
	  case "autostop":
	    url = "/stop_auto?kill=true&task="+params[1]+"&host="+params[2];
	    break;
	  default:
	    return true;
	}
	var form = document.createElement("form");
    form.setAttribute("method", "post");
    form.setAttribute("action", "/resque/telework"+url);
    document.body.appendChild(form);
    form.submit();
};

$(document).ready(function() {
  if (document.startform) {
    document.startform.queue_filter.selectedIndex= 1;
  }
	hostlist($('#host_filter').val());
	queuelist($('#queue_filter').val());

  $('form#batch_action').submit(function(){
    var checkboxes = $('[data-role=task-checkbox]:checked');
    if (checkboxes.length == 0) {
      alert('Please check at least one worker!');
      return false;
    }
    var tasks = [];
    checkboxes.each(function(index, el) {
      tasks.push($(el).attr('data-task'));
    });
    $('form#batch_action input[name=tasks]').val('[' + tasks.join(',') + ']')
    return true;
  });

  $('form#select_tasks').submit(function(){
    var form = $(this);
    var action = form.find('[name=action]').val();
    var only = form.find('[name=only]').val();
    var queue = form.find('[name=queue]').val();
    $('[data-role=task-checkbox]').each(function(index, el){
      el = $(el)
      var queues = el.attr('data-queues');
      if (only) {
        is_match = queues == queue;
      } else {
        is_match = queues.match(new RegExp('(?:,|^)' + queue + '(?:,|$)'));
      }
      if (is_match) {
        if (action == 'select') {
          el.attr('checked', 'checked');
        } else {
          el.removeAttr('checked');
        }
      }
    });
    return false;
  });

  $('[data-role=host-tasks-checkbox]').click(function(){
    var checkboxes = $(this).closest('table').find('[data-role=task-checkbox]');
    if ($(this).is(':checked')) {
      checkboxes.attr('checked', 'checked');
    } else {
      checkboxes.removeAttr('checked');
    }
    return true;
  });
});
</script>

<% redis.reconcile %>

<% unless @dont_show_refresh %>
<div style="float:right;">
    <a href="Overview">Refresh now</a>	&nbsp;&nbsp;&nbsp;
  <% if @refresh %>
    <a href="Overview">Stop auto-refresh</a>
  <% else %>
    <a href="Overview?refresh=20">Start auto-refresh</a>
  <% end %>
</div>
<% end %>

<% if session[:notice] %>
<div class="notice">
  <%= session[:notice] %>
</div>
<% session.delete(:notice) %>
<% end %>

<% notes= redis.notes_pop %>
<% if notes.length>0 %>

<h1>Notes</h1>
<table>
	<tr>
		<th>User</th>
		<th>Date</th>
		<th>Note</th>
        <th>Action</th>
	</tr>
    <% for note,id in notes.each_with_index %>
    <tr>
	    <td><%= note['user'] %></td>
	    <td><%= "#{redis.fmt_date(note['date'], true)}" %></td>
	    <td><%= note['note'] %></td>
        <td>
           <form style="margin:0px;float:center;" id="deln" name="deln" method="post" action="/resque/telework_del_note/<%= id %>" ><input type="submit" value= "Delete" /></form>
        </td>
	</tr>
    <% end %>
</table>
<br>
<% end %>

<% hosts= redis.hosts %>

<% if @scheduling %>

<h1>Starting Workers</h1>
<br>

<form id="startform" name="startform" method="post" action="/resque/telework/start_task" >
  <table>
    <thead>
      <tr>
        <th>Host</th>
        <th>Queue(s)</th>
        <th>Count</th>
        <th>Environment</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>
          <%= generic_filter_with_dis("host_filter", "h", hosts.zip( hosts.map{ |h| redis.aliases(h) } ), "onchange=\"javascript: hostlist(this.options[this.selectedIndex].value);\"") %>
        </td>
        <td>
          <%= generic_filter("queue_filter", "q", ["(other)"] + Resque.redis.smembers('queues').sort << "*", "onchange=\"javascript: queuelist(this.options[this.selectedIndex].value);\"") %>
          <input id="queue_text" type="text" name="qmanual" onkeyup="javascript: queuetext(this.value);" >
        </td>
        <td>
          <%= generic_filter("count_filter", "c", ['1', '2', '3', '4', '5', '6', '8', '10', '12', '16', '20', '24', '30'] ) %>
        </td>
        <td>
          <%= generic_filter("env_filter", "e", ['(default)', 'production', 'staging', 'development', 'test'] )%>
        </td>
        <td><input type="submit" value="Start"></td>
      </tr>
    </tbody>
  </table>
</form>

<div class="clear"></div>

<% end %>

<br>

<div class="pull-right">
  <form id="batch_action" name="batch_action" method="post" action="/resque/telework/batch_action" class="pull-right">
    <%= generic_filter("action_filter", "action", ["Start", "Stop", "Kill", "Delete"]) %>
    <input type="hidden" name="tasks" />
    selected workers
    <input type="submit" value="Go"/>
  </form><br />
  <form id="select_tasks" name="select_tasks">
    <%= generic_filter_with_dis("action_filter", "action", [['select', "Select"], ['deselect', "Deselect"]]) %>
    all workers
    <%= generic_filter_with_dis("only_filter", "only", [["only", "running only"], ["", "running"]]) %>
    <%= generic_filter_with_dis("queue_filter", "queue", Resque.redis.smembers('queues').sort.map { |q| [q, q] }, ' style="max-width: 200px;"') %>
    <input type="submit" value="Go"/>
  </form>
</div>
<h1>Hosts, Revisions, Tasks and Workers</h1>

<table>
    <tr>
      <th>Host</th>
      <th>Daemon</th>
      <th>Revisions</th>
      <th>Tasks and Workers</th>
    </tr>
    <% for host, status, info in redis.daemons_state %>
      <tr>
      <td><center><% ahost = redis.aliases(host) %>
        <a href=<%= "/resque/telework/host/#{host}" %> title="<%= "#{host}\n#{redis.comments(host)}" %>" >
        <% if ahost!=host %>
            <%= ahost %>
        <% else %>
          <%= host %>
        <% end %></a>

        <% if status == 'Alive' %>
          <% if info['cpu'] %>
            <br>cpu:
            <%= info['cpu']['load_1min'] %> / <%= info['cpu']['cores'] %>
          <% elsif info['cpu_load_1mins'] %>
            <br>cpu:
            <%= "(%.2f%% cpu)" % (100*info['cpu_load_1mins']) %>
          <% end %>
          <% if info['mem'] %>
            <br>mem:
            <%= info['mem']['free'] %> G free
          <% end %>
        <% end %>
	     </center>
	  </td>
      <% if 'Alive'==status || 'Restarting'==status || 'Quitting'==status %>
        <td> <center><%= "#{status} (v#{info['version']})" %><br/><br/>
             <form style="margin:0px;float:center;" id="stopd" name="stopd" method="post" action="/resque/telework_stopitd/<%= host %>" align="middle"><input type="submit" value= <%="\"Stop\""%> /></form></center>
        </td>
      <% else %>
        <td><%= status%></td>
      <% end %>
      <td><%= redis.revisions(host).length %> revision(s) installed
      <table><tr>
	     <th>Revision</th>
	     <th>Branch</th>
	     <th>Deployed</th>
	  </tr>
      <% for rev in redis.revisions(host) %>
      <tr>
	     <td><a href= <%= "/resque/telework/revision/#{rev['revision']}" %> ><%= "#{rev['revision_small']}" %></a></td>
	     <td><%= "#{rev['revision_branch']}" %></td>
	     <td><%= "#{redis.fmt_date(rev['revision_deployement_date'], true)}" %></td>
      </tr>
      <%end%>
       </table>
      </td>
      <td><%= redis.tasks(host).length%> task(s)
	  <table><tr>
		</tr><th>Task <input type="checkbox" data-role="host-tasks-checkbox" class="pull-right" /></th>
		     <th>Status</th>
		     <th>Queue(s)</th>
		     <th>Count</th>
		     <th>Revision</th>
		     <th>Action</th>
		     <th>Worker(s)</th>
		<tr>
	  <% for id, info in redis.tasks(host) %>
	  	 <% auto= info['mode']=='Auto' %>
	     <% status= info['worker_status'] %>
	     <% status= "Stopped" if status.blank? %>
	     <% running= status!='Stopped' %>
	     <% paused=  status=='Paused' %>
       <% queues= info['queue'].split(",") %>
       <% tags= @tags_to_queues.select { |tag, tag_queues| (queues - tag_queues).length == 0 }.map(&:first) %>
       <% revision = redis.revisions(host).first %>
      <td>
        <%= "<a href=\"/resque/telework/task/#{host}/#{id}\">#{id}</a>" %>
        <input type="checkbox" name="task_ids[]" value="<%= id %>" data-role="task-checkbox" data-queues="<%= info['queue'] %>" data-task="<%= CGI::escapeHTML({ host: host, task_id: id, count: info['worker_count'], rev: "#{revision.try(:[], 'revision')},#{revision.try(:[], 'revision_small')}" }.to_json) %>" class="pull-right" />
	    </td><td><center><%= auto ? "<b>Auto</b><br/><br/>" : "" %>
        <% if status == 'Stopped' %>
          <span style="color: grey;">Stopped</span>
        <% else %>
          <%= "#{status.gsub(/,/,'<br/>')}" %>
        <% end %>
      </center>
	    </td><td>
      <% tags.each do |tag| %>
        <span class="pull-right label-default"><%= tag %></span>
      <% end %>
      <% for q in queues %>
	    <% if q=="*" %>*
	    <% else %> <% ql= redis.queue_length(q) %>
	    <% if ql==0 %><font color="grey"><span title="Queue is empty"><%= q %></span></font>
	    <% else %><span title="<%= "#{ql} pending jobs" %>" ><%= q %></span>
	    <% end %><% end %><br/><% end %>
	    </td><td><% if running%><%= "#{info['worker_count']}" %>
                    <% else %><select id= <%= "\"count_filter_#{id}\"" %> name="c"/>
                               <% [1,2,3,4,5,6,8,10,12,16,20,24,30].each do |co| %>
                                 <option <%= co==info['worker_count'].to_i ? 'selected="selected"' : '' %>value=<%= "#{co}"%> ><%= co %></option>
                               <% end %>
                    </select><% end %>
		</td><td><% if running %><a href= <%= "/resque/telework/revision/#{info['revision']}" %> ><%= "#{info['revision_small']}" %></a>
			     <% else %> <select id= <%= "\"rev_filter_#{id}\"" %> name="r"/>
			                   <% for rev in redis.revisions(host) %>
			                   <option value=<%= "\"#{rev['revision']},#{rev['revision_small']}\"" %> ><%= rev['revision_small'] %></option>
			                   <% end %>
			                </select>
			     <% end %>
        </td><td>
	        <select id="action" name="a" onchange="javascript: action(this.options[this.selectedIndex].value);" >
	        	<option select="selected" value="select">Select</option>
	            <option <%= 'disabled="disabled"'     if running || auto %> value=<%= "\"start,#{id},#{host}\"" %> >Start worker</option>
	            <option <%= 'disabled="disabled"' unless running && !auto %> value=<%= "\"stop,#{id},#{host}\"" %> >Stop worker</option>
	            <option <%= 'disabled="disabled"' unless running && !auto %> value=<%= "\"kill,#{id},#{host}\"" %> >Kill worker</option>
	            <option <%= 'disabled="disabled"'     if (!running || paused || auto) %> value=<%= "\"pause,#{id},#{host}\"" %> >Pause worker</option>
	            <option <%= 'disabled="disabled"' unless paused && !auto %> value=<%= "\"cont,#{id},#{host}\"" %> >Resume worker</option>
	            <option <%= 'disabled="disabled"'     if auto || running %> value=<%= "\"auto,#{id},#{host}\"" %> >Start auto</option>
	            <option <%= 'disabled="disabled"'     unless auto %> value=<%= "\"autostop,#{id},#{host}\"" %> >Stop auto</option>
	            <option <%= 'disabled="disabled"'     if running || auto %> value=<%= "\"delete,#{id},#{host}\"" %> >Delete</option>
	        </select>
	     </td><td align="center"><p align="center"><font size="1">
		    <% info['worker_id'].zip(info['worker_pid']) do |id,pid| %><% unless pid.blank? %>
		      <%= "<a href=\"/resque/telework/worker/#{host}/#{id}\">#{id}</a> :" if running %>
	          <font size=1><% l= "#{host}:#{pid}" %><%= "<a href=\"/resque/workers/#{l}:#{info['queue']}\">#{pid}</a>" if running %></font><br/>
	        <% end %><% end %>
	        </font></p>
	   </td></tr>
	  <%end%>
	  </table>
	  </td>
      </tr>
    <% end %>
</table>
</br>
<div class="pull-right">
  <form id="stopping_all" name="stopping_all" method="post" action="/resque/telework/stop_all">
  	<%= generic_filter("mode_filter", "m", ["Stop", "Kill"]) %>
      all workers on host <%= generic_filter_with_dis("host_filter", "h", hosts.zip( hosts.map{ |h| redis.aliases(h) } ) <<  ["[All hosts]", "[All hosts]"]) %>
  	<span class="stopping_all_submit"><input type="submit" value="Go"/></span>
  </form><br /><br />
  <form method="post" action="/resque/telework/snapshot" class="pull-right">
    <%= generic_filter_with_dis("action_filter", "action", [["snapshot", "Save snapshot"], ["snapshot_and_stop", "Save snapshot and stop all workers on all hosts"]] + (@snapshot ? [["restore_snapshot", "Restore all workers on all hosts from snapshot"]] : [])) %>
    <span><input type="submit" value="Go"/></span>
  </form>
  <div class="label-default pull-right" style="clear:both">
    <% if @snapshot %>
      Last snapshot: <%= @snapshot['created_at'] %>
    <% else %>
      No snapshot saved
    <% end %>
  </div>
</div>
<br /><br />

<br>
<% if @status_messages %>
<h1>Status Messages</h1>
<table>
    <tr>
      <th>Host</th>
      <th>Severity</th>
      <th>Date</th>
      <th>Message</th>
    </tr>
    <% for info in redis.statuses(@status_messages) %>
    <% c= info['severity']=='Error' ? "bgcolor=\"#ff0000\"" : "" %>
      <tr>
	    <td <%= c %>><%= redis.aliases(info['host']) %></td>
	    <td <%= c %>><%= info['severity'] %></td>
	    <td <%= c %>><%= redis.fmt_date(info['date']) %></td>
	    <td <%= c %>><%= info['message'] %></td>
	  </tr>
   <% end %>
</table>

<%end%>



</div>
